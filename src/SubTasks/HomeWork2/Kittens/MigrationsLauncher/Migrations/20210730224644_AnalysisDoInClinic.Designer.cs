// <auto-generated />
using System;
using DataBase.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MigrationsLauncher.Migrations
{
    [DbContext(typeof(KittensContext))]
    [Migration("20210730224644_AnalysisDoInClinic")]
    partial class AnalysisDoInClinic
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ClinicPatient", b =>
                {
                    b.Property<int>("ClinicsId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsId")
                        .HasColumnType("integer");

                    b.HasKey("ClinicsId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("ClinicPatient");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Analyzes.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AnalysisType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.HasIndex("PatientId");

                    b.ToTable("Analysis");

                    b.HasDiscriminator<string>("AnalysisType").HasValue("Analysis");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PatientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patient");

                    b.HasDiscriminator<string>("PatientType").HasValue("Patient");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Analyzes.BloodAnalysis", b =>
                {
                    b.HasBaseType("DataBase.Abstractions.Entities.Analyzes.Analysis");

                    b.HasDiscriminator().HasValue("blood");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Analyzes.InspectionAnalysis", b =>
                {
                    b.HasBaseType("DataBase.Abstractions.Entities.Analyzes.Analysis");

                    b.HasDiscriminator().HasValue("inspection");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Kitten", b =>
                {
                    b.HasBaseType("DataBase.Abstractions.Entities.Patient");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Feed")
                        .HasColumnType("text");

                    b.Property<bool>("HasCertificate")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("kitten");
                });

            modelBuilder.Entity("ClinicPatient", b =>
                {
                    b.HasOne("DataBase.Abstractions.Entities.Clinic", null)
                        .WithMany()
                        .HasForeignKey("ClinicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Abstractions.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Analyzes.Analysis", b =>
                {
                    b.HasOne("DataBase.Abstractions.Entities.Clinic", "Clinic")
                        .WithMany("Analyzes")
                        .HasForeignKey("ClinicId");

                    b.HasOne("DataBase.Abstractions.Entities.Patient", "Patient")
                        .WithMany("Analysis")
                        .HasForeignKey("PatientId");

                    b.Navigation("Clinic");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Clinic", b =>
                {
                    b.Navigation("Analyzes");
                });

            modelBuilder.Entity("DataBase.Abstractions.Entities.Patient", b =>
                {
                    b.Navigation("Analysis");
                });
#pragma warning restore 612, 618
        }
    }
}
